void Literal(): 
{}
{
	"True" | "False" | <number>
}

void Selector(): 
{}
{
	( "[" <Expr> "]" | "." <ident> )  (<Selector>)?  
}

void ArrayLen(): 
{}
{
	"#" <ident>  (<Selector>)? 
}

void PrimaryExpr(): 
{}
{
	<Literal> | "(" <Expr> ")" | <ProcedureCall> | <ident> (<Selector>)? | <ArrayLen>
}

void UnaryExpr(): 
{}
{
	(<AddOp>)? <PrimaryExpr>
}

void MulExpr(): 
{}
{
	<UnaryExpr>  (<MulOp> <UnaryExpr>)*
}

void AddExpr(): 
{}
{
	<MulExpr> (<AddOp> <MulExpr>)*
}

void RelExpr(): 
{}
{
	<AddExpr> (<RelOp> <AddExpr>)?
}

void EqualExpr(): 
{}
{
	<RelExpr> ( <EqualOp> <RelExpr>)?  
}

void CondAndExpr(): 
{}
{
	<EqualExpr> ( "And" <EqualExpr> )* 
}

void CreationExpr(): 
{}
{
	"new" <NonArrayType> ( "[" <Expr> "]" )*
}

void Expr(): 
{}
{
	<CondAndExpr> ( "Or" <CondAndExpr> )* | <CreationExpr>
}

void ArgumentList(): 
{}
{
	<Expr> ( "," <Expr> )* 
}

void ProcedureCall(): 
{}
{
	<ident> "(" ( <ArgumentList> )? ")" 
}

void Assignment(): 
{}
{
	<ident> ( <Selector> )? ":=" <Expr> 
}

void IfStatement(): 
{}
{
	"If" <Expr> "Then" <StatementList> ( "Else" <StatementList> )? "EndIf"
}

void WhileStatement(): 
{}
{
	"While" <Expr> "Do" <StatementList> "EndWhile"
}

void ReturnStatement(): 
{}
{
	"Return" ( <Expr> )? 
}

void WriteStatement(): 
{}
{
	"Write" <string>
}

void Statement(): 
{}
{
	<IfStatement> | <WhileStatement> | <ReturnStatement> | <WriteStatement> | <Assignment> | <ProcedureCall> | <Block>
}

void StatementList(): 
{}
{
	( <Statement> ";" )*  
}

void Block(): 
{}
{
	( <Decl> )? "Begin" <StatementList> "End" 
}

void NonArrayType(): 
{}
{
	"int" | "bool" | <ident>
}

void Type(): 
{}
{
	<NonArrayType> ( "[" "]" )*
}

void ReturnType(): 
{}
{
	"void" | <Type>
}

void ConstDecl(): 
{}
{
	<Expr> ( "," <Expr> )* 
}

void VarDecl(): 
{}
{
	<ident> "(" ( <ArgumentList> )? ")" 
}

void TypeDecl(): 
{}
{
	<ident> ( <Selector> )? ":=" <Expr> 
}

void Decl(): 
{}
{
	"If" <Expr> "Then" <StatementList> ( "Else" <StatementList> )? "EndIf"
}

void FormalParam(): 
{}
{
	"While" <Expr> "Do" <StatementList> "EndWhile"
}

void FormalParamList(): 
{}
{
	"Return" ( <Expr> )? 
}

void Procedure(): 
{}
{
	"Write" <string>
}

void Program(): 
{}
{
	<IfStatement> | <WhileStatement> | <ReturnStatement> | <WriteStatement> | <Assignment> | <ProcedureCall> | <Block>
}

