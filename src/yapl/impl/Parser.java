package yapl.impl;

/* Generated By:JavaCC: Do not edit this line. Parser.java */
public class Parser implements ParserConstants {

  public static void main(String args[]) throws ParseException {
   Parser scanner;
       if (args.length == 0) {
         System.out.println("JavaCC Scanner:  Reading from standard input . . .");
         scanner = new Parser(System.in);
       } else if (args.length == 1) {
         System.out.println("JavaCC Scanner:  Reading from file " + args[0] + " . . .");
         try {
           scanner = new Parser(new java.io.FileInputStream(args[0]));
         } catch (java.io.FileNotFoundException e) {
           System.out.println("JavaCC Scanner:  File " + args[0] + " not found.");
           return;
         }
       } else {
         System.out.println("JavaCC Scanner:  Usage is one of:");
         System.out.println("         java JavaCCScnaner < inputfile");
         System.out.println("OR");
         System.out.println("         java JavaCCScanner inputfile");
         return;
       }
       try {
         scanner.Start();
         System.out.println("JavaCC Parser:  Java program parsed successfully.");
       } catch (TokenMgrError e) {
         System.out.println("tokenMGRERRORR");
         System.out.println(e.getMessage());
       }
  }

  static final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      jj_consume_token(12);
      break;
    case 13:
      jj_consume_token(13);
      break;
    case number:
      jj_consume_token(number);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Selector() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
      jj_consume_token(14);
      Expr();
      jj_consume_token(15);
      break;
    case 16:
      jj_consume_token(16);
      jj_consume_token(ident);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
    case 16:
      Selector();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void ArrayLen() throws ParseException {
    jj_consume_token(17);
    jj_consume_token(ident);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
    case 16:
      Selector();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  static final public void PrimaryExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
    case 13:
    case number:
      Literal();
      break;
    case 18:
      jj_consume_token(18);
      Expr();
      jj_consume_token(19);
      break;
    case ident:
      ProcedureCall();
      break;
    case 17:
      ArrayLen();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void UnaryExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AddOp:
      jj_consume_token(AddOp);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    PrimaryExpr();
  }

  static final public void MulExpr() throws ParseException {
    UnaryExpr();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MulOp:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_1;
      }
      jj_consume_token(MulOp);
      UnaryExpr();
    }
  }

  static final public void AddExpr() throws ParseException {
    MulExpr();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AddOp:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      jj_consume_token(AddOp);
      MulExpr();
    }
  }

  static final public void RelExpr() throws ParseException {
    AddExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RelOp:
      jj_consume_token(RelOp);
      AddExpr();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  static final public void EqualExpr() throws ParseException {
    RelExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EqualOp:
      jj_consume_token(EqualOp);
      RelExpr();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  static final public void CondAndExpr() throws ParseException {
    EqualExpr();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      jj_consume_token(20);
      EqualExpr();
    }
  }

  static final public void CreationExpr() throws ParseException {
    jj_consume_token(21);
    NonArrayType();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(14);
      Expr();
      jj_consume_token(15);
    }
  }

  static final public void Expr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AddOp:
    case 12:
    case 13:
    case 17:
    case 18:
    case ident:
    case number:
      CondAndExpr();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 22:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        jj_consume_token(22);
        CondAndExpr();
      }
      break;
    case 21:
      CreationExpr();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ArgumentList() throws ParseException {
    Expr();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      jj_consume_token(23);
      Expr();
    }
  }

  static final public void ProcedureCall() throws ParseException {
    jj_consume_token(ident);
    jj_consume_token(18);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AddOp:
    case 12:
    case 13:
    case 17:
    case 18:
    case 21:
    case ident:
    case number:
      ArgumentList();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(19);
  }

  static final public void Assignment() throws ParseException {
    jj_consume_token(ident);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
    case 16:
      Selector();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(24);
    Expr();
  }

  static final public void IfStatement() throws ParseException {
    jj_consume_token(25);
    Expr();
    jj_consume_token(26);
    StatementList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
      jj_consume_token(27);
      StatementList();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(28);
  }

  static final public void WhileStatement() throws ParseException {
    jj_consume_token(29);
    Expr();
    jj_consume_token(30);
    StatementList();
    jj_consume_token(31);
  }

  static final public void ReturnStatement() throws ParseException {
    jj_consume_token(32);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AddOp:
    case 12:
    case 13:
    case 17:
    case 18:
    case 21:
    case ident:
    case number:
      Expr();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

  static final public void WriteStatement() throws ParseException {
    jj_consume_token(33);
    jj_consume_token(string);
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      IfStatement();
      break;
    case 29:
      WhileStatement();
      break;
    case 32:
      ReturnStatement();
      break;
    case 33:
      WriteStatement();
      break;
    case ident:
      Assignment();
      break;
    case 35:
      Block();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void StatementList() throws ParseException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
      case 29:
      case 32:
      case 33:
      case 35:
      case ident:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
      Statement();
      jj_consume_token(34);
    }
  }

  static final public void Block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      Decl();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(35);
    StatementList();
    jj_consume_token(36);
  }

  static final public void NonArrayType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 37:
      jj_consume_token(37);
      break;
    case 38:
      jj_consume_token(38);
      break;
    case ident:
      jj_consume_token(ident);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Type() throws ParseException {
    NonArrayType();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_8;
      }
      jj_consume_token(14);
      jj_consume_token(15);
    }
  }

  static final public void ReturnType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
      jj_consume_token(39);
      break;
    case 37:
    case 38:
    case ident:
      Type();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ConstDecl() throws ParseException {
    Expr();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_9;
      }
      jj_consume_token(23);
      Expr();
    }
  }

  static final public void VarDecl() throws ParseException {
    jj_consume_token(ident);
    jj_consume_token(18);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AddOp:
    case 12:
    case 13:
    case 17:
    case 18:
    case 21:
    case ident:
    case number:
      ArgumentList();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(19);
  }

  static final public void TypeDecl() throws ParseException {
    jj_consume_token(ident);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
    case 16:
      Selector();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(24);
    Expr();
  }

  static final public void Decl() throws ParseException {
    jj_consume_token(25);
    Expr();
    jj_consume_token(26);
    StatementList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
      jj_consume_token(27);
      StatementList();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(28);
  }

  static final public void FormalParam() throws ParseException {
    jj_consume_token(29);
    Expr();
    jj_consume_token(30);
    StatementList();
    jj_consume_token(31);
  }

  static final public void FormalParamList() throws ParseException {
    jj_consume_token(32);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AddOp:
    case 12:
    case 13:
    case 17:
    case 18:
    case 21:
    case ident:
    case number:
      Expr();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  }

  static final public void Procedure() throws ParseException {
    jj_consume_token(33);
    jj_consume_token(string);
  }

  static final public void Program() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      IfStatement();
      break;
    case 29:
      WhileStatement();
      break;
    case 32:
      ReturnStatement();
      break;
    case 33:
      WriteStatement();
      break;
    case ident:
      Assignment();
      break;
    case 35:
      Block();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Start() throws ParseException {
                 Token t;
         do {
             t = getNextToken();
             System.out.println(t.toString());
         } while (t.kind != EOF);
    jj_consume_token(0);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3000,0x14000,0x14000,0x14000,0x14000,0x63000,0x400,0x800,0x400,0x100,0x200,0x100000,0x4000,0x400000,0x263400,0x800000,0x263400,0x14000,0x8000000,0x263400,0x22000000,0x22000000,0x2000000,0x0,0x4000,0x0,0x800000,0x263400,0x14000,0x8000000,0x263400,0x22000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1000,0x0,0x0,0x0,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800,0x0,0x1800,0x0,0x0,0x1800,0x80b,0x80b,0x0,0x860,0x0,0x8e0,0x0,0x1800,0x0,0x0,0x1800,0x80b,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
