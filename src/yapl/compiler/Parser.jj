options {
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Parser)

public class Parser {
  private static int line;
  private static int column;
  private static int errorNo;
  private static String detailedErrorMessage;
  private static String programName;

  public static void main(String args[]) throws ParseException {
   Parser parser;
       if (args.length == 0) {
         System.out.println("JavaCC Parser:  Reading from standard input . . .");
         parser = new Parser(System.in);
       } else if (args.length == 1) {
         System.out.println("JavaCC Parser:  Reading from file " + args[0] + " . . .");
         try {
           parser = new Parser(new java.io.FileInputStream(args[0]));
         } catch (java.io.FileNotFoundException e) {
           System.out.println("JavaCC Parser:  File " + args[0] + " not found.");
           return;
         }
       } else {
         System.out.println("JavaCC Parser:  Usage is one of:");
         System.out.println("         java JavaCCParser< inputfile");
         System.out.println("OR");
         System.out.println("         java JavaCCParser inputfile");
         return;
       }
       try {
         programName = parser.Program();
         CompilerMessage.printOK(programName);
       } catch (ParseException e) {
           CompilerMessage.printError(e, programName);
       } catch(TokenMgrError e) {
           CompilerMessage.printError(e, programName);
       }
  }

}


PARSER_END(Parser)



SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

void RelOp():
{}
{
"<" | "<=" | ">=" | ">"
}

void EqualOp():
{}
{
"==" | "!="
}

void AddOp():
{}
{
"+" | "-"
}

void MulOp():
{}
{
"*" | "/" | "%"
}


void Literal():
{}
{
	"True" | "False" | <number>
}

void Selector():
{}
{
	( "[" Expr() "]" | "." <ident> )  [Selector()]
}

void ArrayLen():
{}
{
	"#" <ident>  [Selector()]
}

void PrimaryExpr():
{}
{

	 Literal() | "(" Expr() ")" | <ident> A() | ArrayLen()
}

void A():
{}
{
     "(" [ ArgumentList() ] ")" | [ Selector() ]
}

void UnaryExpr():
{}
{
	(AddOp())? PrimaryExpr()
}

void MulExpr():
{}
{
	UnaryExpr()  (MulOp() UnaryExpr())*
}

void AddExpr():
{}
{
	MulExpr() (AddOp() MulExpr())*
}

void RelExpr():
{}
{
	AddExpr() [ RelOp() AddExpr() ]
}

void EqualExpr():
{}
{
	RelExpr() [ EqualOp() RelExpr()]
}

void CondAndExpr():
{}
{
	EqualExpr() ( "And" EqualExpr() )*
}

void CreationExpr():
{}
{
	"new" NonArrayType() ( "[" Expr() "]" )*
}

void Expr():
{}
{
	CondAndExpr() ( "Or" CondAndExpr() )* | CreationExpr()
}

void ArgumentList():
{}
{
	Expr() ( "," Expr() )*
}

void ProcedureCall():
{}
{
	<ident> "(" [ ArgumentList() ] ")"
}

void Assignment():
{}
{
	<ident> ( Selector() )? ":=" Expr()
}


void IfStatement():
{}
{
	"If" Expr() "Then" StatementList() [ "Else" StatementList() ] "EndIf"
}

void WhileStatement():
{}
{
	"While" Expr() "Do" StatementList() "EndWhile"
}

void ReturnStatement():
{}
{
	"Return" [ Expr() ]
}

void WriteStatement():
{}
{
	"Write" <string>
}

void Statement():
{}
{

	IfStatement() | WhileStatement() | ReturnStatement() | WriteStatement() | <ident> B() | Block()
}

void B():
{}
{
    "(" [ ArgumentList() ] ")" | ( Selector() )? ":=" Expr()
}

void StatementList():
{}
{
	( Statement() ";" )*
}

void Block():
{}
{
	( Decl() )? "Begin" StatementList() "End"
}


void FormalParam():
{}
{
	Type() <ident>
}

void NonArrayType():
{}
{
	"int" | "bool" | <ident>
}

void Type():
{}
{
	NonArrayType() ( "[" "]" )*
}

void ReturnType():
{}
{
	"void" | Type()
}

void ConstDecl():
{}
{
    "Const" <ident> "=" Literal() ";"
}

void VarDecl():
{}
{
	Type() <ident> ("," <ident>)* ";"
}

void TypeDecl():
{}
{
    "Record" <ident> VarDecl() (VarDecl())* "EndRecord" ";"
}

void Decl():
{}
{
	"Declare" ( ConstDecl() | VarDecl() | TypeDecl() )*
}


void FormalParamList():
{}
{
    FormalParam() ("," FormalParam())*
}

void Procedure():
{}
{
	"Procedure" ReturnType() <ident> "(" [FormalParamList() ] ")" Block() <ident> ";"
}

String Program():
{
    Token program = null;
    String res = "";
}
{
	"Program " program = <ident> (Decl() | Procedure())*
	 "Begin" StatementList() "End" <ident> "."
	 {
	    res = program.toString();
	    programName = res;
	 }
	 {
	    return res;
	 }
}



TOKEN : /* LITERALS */
{

    <otherchar:"+" | "-" | "*" | "/" | "." | "," | ";" | ":" | "!"
                         | "?" | "=" | "#" | "%" | "<" | ">" | "$" | "(" | ")"
               | "[" | "]" | "{" | "}" | "\\" | "@" | "&" | "^" | "|">
|
    <ident: <letter> ( <letter> | <digit> )*>
|
    <letter: ["A"-"Z"]|["a"-"z"]|"_">
|
    <number: <digit> ( <digit> )*>
|
    <string:"\"" ( " " | <letter> | <digit> | <otherchar> )* "\"">
|
    <digit: ["0"-"9"] >

}